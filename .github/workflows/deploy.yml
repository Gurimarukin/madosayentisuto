# Build Dockerfile, push it to registry and call deploy webhook.

name: Build and deploy

on:
  workflow_dispatch:

jobs:
  build:
    environment: prod

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: OpenSSL?
        run: |
          openssl help
          cat filenotexists

      - uses: actions/checkout@v3

      - name: Create .env
        run: |
          echo "
          \# client

          API_HOST = ${{ vars.API_HOST }}

          \#server

          IS_DEV = false

          LOGGER_CONSOLE_LEVEL         = ${{ vars.LOGGER_CONSOLE_LEVEL }}
          LOGGER_DISCORD_DM_LEVEL      = ${{ vars.LOGGER_DISCORD_DM_LEVEL }}
          LOGGER_DISCORD_DM_IS_COMPACT = ${{ vars.LOGGER_DISCORD_DM_IS_COMPACT }}

          CLIENT_ID     = ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET = ${{ secrets.CLIENT_SECRET }}

          HTTP_PORT            = ${{ vars.HTTP_PORT }}
          HTTP_ALLOWED_ORIGINS = ${{ vars.HTTP_ALLOWED_ORIGINS }}

          DB_HOST     = ${{ vars.DB_HOST }}
          DB_NAME     = ${{ vars.DB_NAME }}
          DB_USER     = ${{ secrets.DB_USER }}
          DB_PASSWORD = ${{ secrets.DB_PASSWORD }}

          JWT_SECRET = ${{ secrets.JWT_SECRET }}

          YTDLP_PATH = /usr/src/app/yt-dlp

          ADMINS = ${{ vars.ADMINS }}

          UWU_GUILDS = ${{ vars.UWU_GUILDS }}

          KOH_LANTA_VICTIMS = ${{ vars.KOH_LANTA_VICTIMS }}

          CAPTAIN_MENTIONS = ${{ vars.CAPTAIN_MENTIONS }}
          CAPTAIN_THANKS   = ${{ vars.CAPTAIN_THANKS }}

          ELEVATOR_DELAY = ${{ vars.ELEVATOR_DELAY }}

          THE_QUEST_WEBAPP_URL = ${{ vars.THE_QUEST_WEBAPP_URL }}
          THE_QUEST_API_URL = ${{ vars.THE_QUEST_API_URL }}
          THE_QUEST_TOKEN = ${{ secrets.THE_QUEST_TOKEN }}
          THE_QUEST_REFRESH_EVERY_MINUTES = ${{ vars.THE_QUEST_REFRESH_EVERY_MINUTES }}
          " > .env

      - name: Create Containerfile
        # sed '/^[^#$]/s/^/ENV /g' .env >> Containerfile
        run: |
          echo "
          FROM node:18

          WORKDIR /app

          COPY resources/ resources/
          COPY src/ src/
          COPY \
            .env \
            package.json \
            tsconfig.build.json \
            tsconfig.json \
            yarn.lock \
            .

          RUN yarn install
          RUN ls -al
          RUN yarn run build

          RUN wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp
          RUN chmod +x yt-dlp
          RUN ./yt-dlp --version

          EXPOSE ${{ vars.HTTP_PORT }}

          CMD node --experimental-specifier-resolution=node dist/server/index.js
          " > Containerfile

      - name: Exit 1
        run: |
          cat .env
          cat Containerfile
          cat filenotexists
          echo "this should be echoed"

      - name: Build image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: madosayentisuto
          containerfiles: ./Containerfile

      - name: Push image
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          registry: ${{ vars.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

      - name: Call deploy webhook
        run: echo "TODO call deploy webhook"
